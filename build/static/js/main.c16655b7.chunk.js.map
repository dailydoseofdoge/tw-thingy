{"version":3,"sources":["Playground.tsx","atoms/selectedColorState.tsx","ColorSelector.tsx","serviceWorker.ts","index.tsx"],"names":["selectedColorState","atom","key","default","initialGrid","Array","i","j","push","x","y","color","Playground","props","selectedColor","useRecoilState","useState","grid","setGrid","handleClick","cell","style","width","height","display","flexDirection","flexWrap","map","background","outline","onMouseDown","event","preventDefault","onMouseEnter","buttons","colors","ColorSelector","setSelectedColor","c","alignSelf","paddingLeft","gridColumnStart","gridColumnEnd","borderRadius","backgroundColor","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","margin","gridTemplateColumns","gap","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAKA,I,iECEeA,EALYC,YAAK,CAC9BC,IAAK,gBACLC,QAAS,YDAPC,EAAsB,IAAIC,MACrBC,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBH,EAAYI,KAAK,CAAEC,EAAGH,EAAGI,EAAGH,EAAGI,MAAO,YAU1C,IA0CeC,EA1CkB,SAACC,GAChC,IAAMC,EAAgBC,YAAef,GAAoB,GADf,EAGlBgB,mBAAiBZ,GAHC,mBAGnCa,EAHmC,KAG7BC,EAH6B,KAKpCC,EAAc,SAACC,GACnBA,EAAKT,MAAQG,EACbI,EAAQ,YAAID,KAGd,OACE,yBACEI,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,cAAe,MACfC,SAAU,SAGXT,EAAKU,KAAI,SAACP,GACT,OACE,yBACElB,IAAG,UAAKkB,EAAKX,GAAV,OAAcW,EAAKV,GACtBW,MAAO,CACLE,OAAQ,MACRD,MAAO,MACPM,WAAW,GAAD,OAAKR,EAAKT,OACpBkB,QAAS,qBAEXC,YAAa,SAACC,GACZA,EAAMC,iBACNb,EAAYC,IAEda,aAAc,SAACF,GAAD,OAA6B,IAAlBA,EAAMG,SAAiBf,EAAYC,WE/ClEe,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WA4B7CC,EA1BqB,SAACvB,GAAW,IAAD,EACHE,YAAef,GADZ,mBACtCc,EADsC,KACvBuB,EADuB,KAG7C,OACE,oCACGF,EAAOR,KAAI,SAACW,EAAGhC,GAAJ,OACV,4BACEJ,IAAKI,EACLe,MAAO,CACLkB,UAAW,SACXhB,OAAQ,MAERiB,YAAa,OACbC,gBAAiBnC,EAAI,EACrBoC,cAAepC,EAAI,EACnBqC,aAAc,MACdC,gBAAiBN,EACjBO,OAAQ/B,IAAkBwB,EAAI,oBAAsB,QAEtDR,YAAa,SAACC,GAAD,OAAWM,EAAiBC,WCb/BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,yBACEhC,MAAO,CACLC,MAAO,QACPC,OAAQ,QACR+B,OAAQ,SAGV,yBAAKjC,MAAO,CAAEE,OAAQ,MAAOD,MAAO,QAClC,kBAAC,EAAD,OAEF,yBACED,MAAO,CACLkB,UAAW,SACXf,QAAS,OACT+B,oBAAqB,iBACrBC,IAAK,MACLjC,OAAQ,MACRD,MAAO,QAGT,kBAAC,EAAD,UAKRmC,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c16655b7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport selectedColorState from \"./atoms/selectedColorState\";\r\n\r\nlet initialGrid: Cell[] = new Array<Cell>();\r\nfor (let i = 0; i < 10; i++) {\r\n  for (let j = 0; j < 10; j++) {\r\n    initialGrid.push({ x: i, y: j, color: \"#F5F7F5\" });\r\n  }\r\n}\r\n\r\ninterface Cell {\r\n  color: String;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst Playground: React.FC<{}> = (props) => {\r\n  const selectedColor = useRecoilState(selectedColorState)[0];\r\n\r\n  const [grid, setGrid] = useState<Cell[]>(initialGrid);\r\n\r\n  const handleClick = (cell: Cell) => {\r\n    cell.color = selectedColor;\r\n    setGrid([...grid]);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        flexWrap: \"wrap\",\r\n      }}\r\n    >\r\n      {grid.map((cell) => {\r\n        return (\r\n          <div\r\n            key={`${cell.x}${cell.y}`}\r\n            style={{\r\n              height: \"10%\",\r\n              width: \"10%\",\r\n              background: `${cell.color}`,\r\n              outline: \"1px solid #7C7981\",\r\n            }}\r\n            onMouseDown={(event) => {\r\n              event.preventDefault();\r\n              handleClick(cell);\r\n            }}\r\n            onMouseEnter={(event) => event.buttons === 1 && handleClick(cell)}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Playground;\r\n","import { atom } from \"recoil\";\r\n\r\nconst selectedColorState = atom({\r\n  key: \"selectedColor\",\r\n  default: \"#7C7981\",\r\n});\r\n\r\nexport default selectedColorState;\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport selectedColorState from \"./atoms/selectedColorState\";\r\n\r\nconst colors = [\"#7C7981\", \"#AFA2A9\", \"#475870\", \"#323F50\", \"#848D8C\"];\r\n\r\nconst ColorSelector: React.FC<{}> = (props) => {\r\n  const [selectedColor, setSelectedColor] = useRecoilState(selectedColorState);\r\n\r\n  return (\r\n    <>\r\n      {colors.map((c, i) => (\r\n        <button\r\n          key={i}\r\n          style={{\r\n            alignSelf: \"center\",\r\n            height: \"50%\",\r\n            //paddings and margins are relative to the elements dimensions\r\n            paddingLeft: \"100%\",\r\n            gridColumnStart: i + 1,\r\n            gridColumnEnd: i + 2,\r\n            borderRadius: \"30%\",\r\n            backgroundColor: c,\r\n            border: selectedColor === c ? \"2xp solid #333339\" : \"none\",\r\n          }}\r\n          onMouseDown={(event) => setSelectedColor(c)}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColorSelector;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport \"./index.css\";\nimport Playground from \"./Playground\";\nimport ColorSelector from \"./ColorSelector\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <div\n        style={{\n          width: \"100vh\",\n          height: \"100vh\",\n          margin: \"auto\",\n        }}\n      >\n        <div style={{ height: \"90%\", width: \"90%\" }}>\n          <Playground />\n        </div>\n        <div\n          style={{\n            alignSelf: \"center\",\n            display: \"grid\",\n            gridTemplateColumns: \"repeat(5, 1fr)\",\n            gap: \"20%\",\n            height: \"10%\",\n            width: \"90%\",\n          }}\n        >\n          <ColorSelector />\n        </div>\n      </div>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}